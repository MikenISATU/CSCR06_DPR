name: Ping Supabase to Prevent Pausing
on:
  schedule:
    - cron: '30 18 * * 1' # Runs every Monday at 6:30 PM UTC
    - cron: '30 18 * * 4' # Runs every Thursday at 6:30 PM UTC
    - cron: '30 18 * * 0' # Runs every Sunday at 6:30 PM UTC
  workflow_dispatch: # Allows manual triggering for testing
jobs:
  ping:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install Supabase client
        run: npm install @supabase/supabase-js
      - name: Debug Environment Variables
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          echo "SUPABASE_URL set: $SUPABASE_URL"
          echo "SUPABASE_KEY set: ${SUPABASE_KEY:0:5}..."
      - name: Create ping script
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          echo "const { createClient } = require('@supabase/supabase-js');

          console.log('SUPABASE_URL set:', !!process.env.SUPABASE_URL);
          console.log('SUPABASE_KEY set:', !!process.env.SUPABASE_KEY);

          const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

          async function pingWithRetry(attempts = 3, delay = 2000) {
            for (let i = 0; i < attempts; i++) {
              try {
                const { data, error } = await supabase.from('users2').select('id').limit(1);
                if (error) throw error;
                console.log('Query successful:', data);
                process.exit(0);
              } catch (error) {
                console.error(\`Attempt \${i + 1} failed: \${error.message}\`);
                if (i === attempts - 1) {
                  console.error('All attempts failed:', error);
                  process.exit(1);
                }
                await new Promise(resolve => setTimeout(resolve, delay));
              }
            }
          }

          pingWithRetry();" > ping.js
      - name: Run ping script
        env:
          SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: node ping.js
